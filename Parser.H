/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef PARSER_HEADER_FILE
#define PARSER_HEADER_FILE

#include<vector>
#include<string>
#include<cstdio>
#include "Absyn.H"


Program* pProgram(FILE *inp);
Program* pProgram(const char *str);
Def* pDef(FILE *inp);
Def* pDef(const char *str);
ListDef* pListDef(FILE *inp);
ListDef* pListDef(const char *str);
Field* pField(FILE *inp);
Field* pField(const char *str);
ListField* pListField(FILE *inp);
ListField* pListField(const char *str);
Argument* pArgument(FILE *inp);
Argument* pArgument(const char *str);
ListArgument* pListArgument(FILE *inp);
ListArgument* pListArgument(const char *str);
Statment* pStatment(FILE *inp);
Statment* pStatment(const char *str);
ListStatment* pListStatment(FILE *inp);
ListStatment* pListStatment(const char *str);
Declaration* pDeclaration(FILE *inp);
Declaration* pDeclaration(const char *str);
ConstDeclaration* pConstDeclaration(FILE *inp);
ConstDeclaration* pConstDeclaration(const char *str);
ConstSpecification* pConstSpecification(FILE *inp);
ConstSpecification* pConstSpecification(const char *str);
VariableDeclaration* pVariableDeclaration(FILE *inp);
VariableDeclaration* pVariableDeclaration(const char *str);
VariableSpecification* pVariableSpecification(FILE *inp);
VariableSpecification* pVariableSpecification(const char *str);
SimpleStatment* pSimpleStatment(FILE *inp);
SimpleStatment* pSimpleStatment(const char *str);
ShortVariableDeclaration* pShortVariableDeclaration(FILE *inp);
ShortVariableDeclaration* pShortVariableDeclaration(const char *str);
Expression* pExpression15(FILE *inp);
Expression* pExpression15(const char *str);
Expression* pExpression14(FILE *inp);
Expression* pExpression14(const char *str);
Expression* pExpression13(FILE *inp);
Expression* pExpression13(const char *str);
Expression* pExpression12(FILE *inp);
Expression* pExpression12(const char *str);
Expression* pExpression11(FILE *inp);
Expression* pExpression11(const char *str);
Expression* pExpression10(FILE *inp);
Expression* pExpression10(const char *str);
Expression* pExpression9(FILE *inp);
Expression* pExpression9(const char *str);
Expression* pExpression8(FILE *inp);
Expression* pExpression8(const char *str);
Expression* pExpression4(FILE *inp);
Expression* pExpression4(const char *str);
Expression* pExpression3(FILE *inp);
Expression* pExpression3(const char *str);
Expression* pExpression2(FILE *inp);
Expression* pExpression2(const char *str);
Expression* pExpression(FILE *inp);
Expression* pExpression(const char *str);
Expression* pExpression1(FILE *inp);
Expression* pExpression1(const char *str);
Expression* pExpression5(FILE *inp);
Expression* pExpression5(const char *str);
Expression* pExpression6(FILE *inp);
Expression* pExpression6(const char *str);
Expression* pExpression7(FILE *inp);
Expression* pExpression7(const char *str);
ListExpression* pListExpression(FILE *inp);
ListExpression* pListExpression(const char *str);
Type* pType(FILE *inp);
Type* pType(const char *str);
ListType* pListType(FILE *inp);
ListType* pListType(const char *str);
ListId* pListId(FILE *inp);
ListId* pListId(const char *str);


#endif
